---
# cas d'usage d'appel de keystore_management :
#- lancement pour nouvelle installation = création (tomcat_role_goal: install)
#- lancement pour installation existante = mise à jour si nécessaire (tomcat_role_goal: install) :
#  - var recreate_keystore true (par défaut) : recrée systématiquement le keystore
#  - var recreate_keystore false : ne recrée pas le keystore mais doit juste le mettre à jour si nécessaire
#- lancement depuis playbook copy_certs = mise à jour si nécessaire (tomcat_role_goal: update_keystore)
#  - ne doit pas créer le keystore si il n'existe pas
#  - gestion des owners différents mode v1 (tomcat) / v2 (tomcat_instance_user)

##############################################
#### PRE REQUIS SELON LE CAS D'USAGE : EXIST OU PAS / OWNER TOMCAT OU PAS
##############################################
- name: "check if catalina_base {{ catalina_base }} exists and get install owner (tomcat or tomcat_instance_user)"
  stat:
    path: "{{ catalina_base }}"
  register: _get_catalina_base_dir_info
  ignore_errors: true
#  when: server_type == 'web' or server_type == 'ws'

# compatibilité playbook copy_certs / tomcat_role_goal != 'install' pour les install historiques
# ne gère que les mydomain.net
- name: "install_web mode V1 (set owner and group facts to tomcat etc)"
  no_log: true
  set_fact:
    _tomcat_owner: tomcat
    _tomcat_group: tomcat
    _keystore_name: mydomain.net.jks
    _keystore_pwd: 123456
    _keystore_path: /etc/ssl/mydomain.net
  when:
    - tomcat_role_goal != 'install'
    - _get_catalina_base_dir_info.stat.exists
    - _get_catalina_base_dir_info.stat.pw_name == "tomcat"

- name: assert keystore_name and keystore_pwd arg are defined
  assert:
    that:
     - keystore_name is defined
     - keystore_pwd is defined
    msg: "keystore_name and/or keystore_pwd parameter is not defined !"

- name: "install_web mode V2 (set owner and group facts tomcat_instance_user etc)"
  no_log: true
  set_fact:
    _tomcat_owner: "{{ tomcat_instance_user }}"
    _tomcat_group: "{{ tomcat_instance_group }}"
    _keystore_name: "{{ keystore_name }}"
    _keystore_pwd: "{{ keystore_pwd }}"
    _keystore_path: "{{ catalina_base }}"
  when:
    - _get_catalina_base_dir_info.stat.exists
    - _get_catalina_base_dir_info.stat.pw_name != "tomcat"

##############################################
#### FIN PRE REQUIS SELON LE CAS D'USAGE
##############################################


# when tomcat_role_goal not 'install' + catalina_base not exists => on ne fait RIEN !!
##############################################
#### GESTION KEYSTORE WHEN NOT JENKINS (pour les lancements du playbook par utilisateur et non par Jenkins)
##############################################
# TODO: gérer le cas recreate_keystore false : ne recrée pas le keystore mais doit juste le mettre à jour si nécessaire
- name: (Re)create keystore when not JENKINS block
  become: true
  when:
    - not JENKINS
    - recreate_keystore
    - _get_catalina_base_dir_info.stat.exists
  block:
    - name: Delete old keystore
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ certificate_path }}/{{ tomcat_certificate_alias }}.pfx"
#        - "{{ certificate_path }}/{{ keystore_name }}" # a supprimer quand tout le parc aura 1 keystore dédié par instance
        - "{{ _keystore_path }}/{{ tomcat_certificate_alias }}.pfx"
        - "{{ _keystore_path }}/{{ _keystore_name }}"

    - name: install certs loop over certificates_list block
      include_tasks: keystore_import_loop.yml
      loop: "{{ certificates_list }}"
      loop_control:
        loop_var: _certificate

    - name: Change keystore file owner
#      become: true
      file:
        path: "{{ _keystore_path }}/{{ _keystore_name }}"
        mode: 0640
        owner: "{{ _tomcat_owner }}"
        group: "{{ _tomcat_group }}"


##############################################
#### GESTION KEYSTORE WHEN JENKINS (pour les lancements depuis la CI Jenkins, le keystore est alors dans l'env)
##############################################
- name: Copy keystore from jenkins env when JENKINS block
  become: true
  when: JENKINS
  block:
    - name: Copy keystore from jenkins env when JENKINS
      copy:
        # ici keystore_name est passé par le Jenkinsfile.jdp
        src: "{{ _keystore_name }}"
        dest: "{{ _keystore_path }}/{{ _keystore_name }}"
        mode: 0640
        backup: yes
        force: no
        owner: "{{ _tomcat_owner }}"
        group: "{{ _tomcat_group }}"

    # A voir ..
    - name: Delete temporary files when JENKINS
      file:
        state: absent
        path: "{{ item }}"
      with_items:
        - "{{ cert_path_tmp }}/{{ my_keystore }}"
        - "{{ cert_path_tmp }}/{{ tomcat_certificate_alias }}.p12"
        - "{{ cert_path_tmp }}/{{ certificate_key_file }}"
        - "{{ cert_path_tmp }}/my.key"
